#!/bin/bash
set -e

HERE=$(dirname $(readlink -f "$0"))
INTEGRATION_PATH=$(dirname "$HERE")
export INTEGRATION_PATH

COMPOSE_CMD_OPEN="docker-compose -p backend-tests \
        -f $INTEGRATION_PATH/docker-compose.yml \
        -f $INTEGRATION_PATH/docker-compose.demo.yml \
        -f $INTEGRATION_PATH/backend-tests/docker/docker-compose.backend-tests.yml \
        -f $INTEGRATION_PATH/docker-compose.storage.minio.yml
        "
COMPOSE_CMD_ENTERPRISE="${COMPOSE_CMD_OPEN} -f $INTEGRATION_PATH/docker-compose.enterprise.yml \
        -f $INTEGRATION_PATH/extra/recaptcha-testing/tenantadm-test-recaptcha-conf.yml \
        -f $INTEGRATION_PATH/extra/smtp-testing/conductor-workers-smtp-test.yml \
        -f $INTEGRATION_PATH/extra/stripe-testing/stripe-test.docker-compose.yml
        "
COMPOSE_CMD=""

PYTEST_FILTER_OPEN="not Enterprise and not Multitenant"
PYTEST_FILTER_ENTERPRISE="Enterprise"
PYTEST_FILTER=""

PYTEST_REPORT_OPEN="--self-contained-html \
        --junit-xml=results_backend_integration_open.xml \
        --html=report_backend_integration_open.html"
PYTEST_REPORT_ENTERPRISE="--self-contained-html \
        --junit-xml=results_backend_integration_enterprise.xml \
        --html=report_backend_integration_enterprise.html"
PYTEST_REPORT=""

usage() {
    echo "runner script for backend-specific integration tests"
    echo ""
    echo "./backend-tests"
    echo -e "\t-h --help"
    echo -e "\t-s --suite <SUITE>\trun specific test suite"
    echo -e "\t                  \t<SUITE> can be 'open' (default), 'enterprise', 'all'"
    echo -e "\t-c --skip-cleanup \tleave containers running after tests"
    echo -e "\t other args will be passed to the testing container's py.test command"
    echo ""
    echo -e "examples:"
    echo -e "run default ST setup:"
    echo -e "\t./run"
    echo -e "run tests Enterprise tests"
    echo -e "\t./run -s enterprise"
    echo -e "run specific test TestGetDevices in both setups"
    echo -e "\t./run -s all -k TestGetDevices"
}

TEST_SUITES=( "open" )
parse_args(){
    while [ $# -gt 0 ]; do
        case "$1" in
            -h | --help)
                usage
                exit
                ;;
            -s | --suite)
                shift 1
                case "$1" in
                    open)
                        ;;
                    enterprise)
                        TEST_SUITES=( "enterprise" )
                        ;;
                    all)
                        TEST_SUITES=( "open" "enterprise" )
                        ;;
                    *)
                        usage
                        exit
                        ;;
                esac
                ;;
            -f | -f=*)
                usage
                exit 1
                ;;
            -c | --skip-cleanup)
                SKIP_CLEANUP=1
                ;;
            *)
                USER_PYTEST_ARGS="$USER_PYTEST_ARGS $1"
                ;;
        esac
        shift 1
    done
}

build_backend_tests_runner() {
    docker build -t mender-backend-tests-runner -f $INTEGRATION_PATH/backend-tests/docker/Dockerfile $INTEGRATION_PATH/backend-tests
}

run_tests() {
    $COMPOSE_CMD up -d

    cid=""
    declare retries=5
    while [[ $retries -gt 0 && -z $cid ]]; do
        cid=$(get_container_id mender-backend-tests-runner)
        sleep 1
        retries=$((retries-1))
    done

    if [[ -z $cid ]]; then
        echo "failed to get container id"
        return 1
    fi

    run_tests_failed=""
    docker attach $cid || run_tests_failed=1
    rc=$(get_container_exit_code $cid)
    if [ "$run_tests_failed" != "1" ] && [ "$rc" != "0" ]; then
        run_tests_failed=$rc
    fi
}

get_container_id() {
    echo "$(docker ps --filter label=com.docker.compose.service=$1 -q)"
}

get_container_exit_code() {
    echo "$(docker inspect --format '{{.State.ExitCode}}' $1 || echo 1)"
}

copy_test_reports_if_args() {
    while [ -n "$1" ]; do
        case "$1" in
            --junit-xml=*)
                RESULTS_FILE="${1#--junit-xml=}"
                ;;
            --junit-xml)
                shift
                RESULTS_FILE="$1"
                ;;
            --html=*)
                REPORT_FILE="${1#--html=}"
                ;;
            --html)
                shift
                REPORT_FILE="$1"
                ;;
        esac
        shift
    done

    if [ -n "$RESULTS_FILE" ]; then
        echo "-- copying file $RESULTS_FILE"
        docker cp ${cid}:/$RESULTS_FILE . || true
    fi
    if [ -n "$REPORT_FILE" ]; then
        echo "-- copying file $REPORT_FILE"
        docker cp ${cid}:/$REPORT_FILE . || true
    fi
}

prepare_pytest_args() {
    PYTEST_ARGS=""
    filter="none"
    for val in $USER_PYTEST_ARGS; do
        if [ "$val" == "-k" ]; then
            filter="next"
        elif [ "$filter" == "next" ]; then
            PYTEST_FILTER="$PYTEST_FILTER and $val"
            filter="done"
        else
            PYTEST_ARGS="$PYTEST_ARGS $val"
        fi
    done

    echo "-- using PYTEST_FILTER=$PYTEST_FILTER"
    PYTEST_ARGS="$PYTEST_ARGS -k '$PYTEST_FILTER' $PYTEST_REPORT"

    export PYTEST_ARGS
}

cleanup(){
    [ -z $SKIP_CLEANUP ] && $COMPOSE_CMD down -v --remove-orphans && $COMPOSE_CMD rm || true
}

parse_args "$@"
build_backend_tests_runner


for suite in "${TEST_SUITES[@]}"; do
    case "$suite" in
        open)
            echo "Skipping Open Source test suite for staging testing"
            continue
            ;;
        enterprise)
            COMPOSE_CMD="$COMPOSE_CMD_ENTERPRISE"
            PYTEST_FILTER="$PYTEST_FILTER_ENTERPRISE"
            PYTEST_REPORT="$PYTEST_REPORT_ENTERPRISE"
            ;;
    esac

    prepare_pytest_args
    run_tests

    if [ "$run_tests_failed" != "" ]; then
        script_failed=$run_tests_failed
        tmppath=$(mktemp ${HERE}/acceptance.XXXXXX)
        echo "-- tests failed, dumping logs to $tmppath"
        $COMPOSE_CMD logs > $tmppath
    fi

    copy_test_reports_if_args $PYTEST_REPORT

    cleanup

done

exit $script_failed
