#!/bin/bash
set -xv
# Don't ever let environ fuck with our program again!
# export LC_ALL=C

./verify-docker-versions

usage() {
    cat <<EOF
$(basename $0) [options] docker-options

--client
	Enable emulated client. To enable more than one client, you can use:
	  $(basename $0) --client scale mender-client=2

All other arguments passed to this command are passed directly to
docker-compose, if you want to run the demo, run:

'$(basename $0) up'
EOF
}

if [ "$#" -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    usage
    exit 1
fi

# For the integration tests the name of the docker-compose project is
# generated by pytest
DOCKER_COMPOSE_PROJECT_NAME="${DOCKER_COMPOSE_PROJECT_NAME:-integration}"

CLIENT=
CLIENT_ARGS="-f docker-compose.client.yml -f docker-compose.client.demo.yml"
# The demo environment has some external dependencies upon: wget, curl, jq
hash wget 2>/dev/null || { echo >&2 "The demo script requires the 'wget' tool to be available. Aborting."; exit 1; }
hash curl 2>/dev/null || { echo >&2 "The demo script requires the 'curl' tool to be available. Aborting."; exit 1; }
hash jq 2>/dev/null || { echo >&2 "The demo script requires the 'jq' tool to be available. Aborting."; exit 1; }

while [ -n "$1" ]; do
    if [ "$1" = "--no-client" ]; then
        echo "--no-client argument is deprecated. Client is now disabled by default and can be enabled with --client"
    elif [ "$1" = "--client" ]; then
        CLIENT="$CLIENT_ARGS"
        echo "-- enabling client container"
    elif [ "$1" = "-p" ] || [ "$1" = "--project-name" ]; then
        shift
        DOCKER_COMPOSE_PROJECT_NAME="$1"
    elif [ "$1" = "--kvm" ]; then
        echo "--kvm argument is deprecated. KVM will be enabled automatically if available"
    elif [ "$1" = "down" ] || [ "$1" = "rm" ] || [ "$1" = "stop" ]; then
        # If the argument is either "down" or "rm", enable the client so that it
        # gets cleaned up, no matter if `--client` is passed or not.
        CLIENT="$CLIENT_ARGS"
        # Not a flag, so we should break out of the loop.
        break
    else
        break
    fi
    shift
done

# Check if the demo-Artifact has been downloaded,
# or if there exists a newer one in storage.
DEMO_ARTIFACT_NAME="mender-demo-artifact.mender"
wget -q -O mender-demo-artifact.mender https://dgsbl4vditpls.cloudfront.net/${DEMO_ARTIFACT_NAME}

retval=$?
if [ $retval -ne 0 ]; then
    echo "Failed to download the demo Artifact"
    exit $retval
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
    ARTIFACT_SIZE_BYTES=$(stat -f %z ${DEMO_ARTIFACT_NAME}) # BSD is not GNU -_-
else
    ARTIFACT_SIZE_BYTES=$(stat -c %s ${DEMO_ARTIFACT_NAME})
fi

# speed up first start by pulling containers in parallel
docker images | grep -q 'mendersoftware/deployments'

if [[ "$?" -eq 1 ]]; then
    compose_args=""
    docker_compose_output=$(docker-compose pull -h)

    # If --no-parallel option exists, it means that docker-compose is
    # running a version where --parallel is default and will warn about
    # deprecated option if used.
    #
    # This behavior was changed in version docker-compose 1.21.0
    echo "$docker_compose_output" | grep -q -- '--no-parallel'
    if [[ "$?" -eq 1 ]]; then
        compose_args="--parallel"
    fi

    docker-compose pull ${compose_args}
fi

# Pass this value on to the GUI container as an env variable
export INTEGRATION_VERSION=$(git describe --tags --abbrev=0)
export MENDER_ARTIFACT_VERSION=$(extra/release_tool.py -g mender-artifact)

RUN_UP=$(echo "$@" | grep '\bup\b')
if [[ "$RUN_UP" == "" ]]; then
    # exec steals the shell, so unless docker-compose is not found,
    # exit 1 will never happen.
    exec docker-compose \
         -f docker-compose.yml \
         -f docker-compose.storage.minio.yml \
         -f docker-compose.demo.yml \
         -p ${DOCKER_COMPOSE_PROJECT_NAME} \
         $CLIENT \
         "$@"
    exit 1
fi

# ------------------------------------------------------------------------------
#
#       The following code will only be run in the case ./demo up [args]
#
# ------------------------------------------------------------------------------

# Make sure that the demo environment is brought down on SIGINT
exitfunc() {
    retval=$(docker-compose \
         -f docker-compose.yml \
         -f docker-compose.storage.minio.yml \
         -f docker-compose.demo.yml \
         -p ${DOCKER_COMPOSE_PROJECT_NAME} \
         $CLIENT \
         stop)
    exit $retval
}

trap exitfunc SIGINT

echo "Starting the Mender demo environment..."

docker-compose \
    -f docker-compose.yml \
    -f docker-compose.storage.minio.yml \
    -f docker-compose.demo.yml \
    -p ${DOCKER_COMPOSE_PROJECT_NAME} \
    $CLIENT \
    "$@" -d

retval=$?
if [[ $retval -ne 0 ]]; then
    echo "Failed to start docker compose"
    exit $retval
fi

USER='mender-demo@example.com'
PASSWORD=$(LC_ALL=C < /dev/urandom 2>/dev/null tr -dc A-Za-z0-9 | head -c12)


RETRY_LIMIT=5

# Get the IP of the mender-api-gateway
RETRIES=0
while :
do
    MENDER_TEST_GATEWAY=$(docker ps -q --filter name=${DOCKER_COMPOSE_PROJECT_NAME}_mender-api-gateway | xargs docker inspect --format={{.NetworkSettings.Networks.${DOCKER_COMPOSE_PROJECT_NAME}_mender.IPAddress}})
    echo $MENDER_TEST_GATEWAY
    if [[ $MENDER_TEST_GATEWAY == "" ]]; then
        echo "The mender-gateway-api service does not seem to be up yet. Retrying..."
    else
        echo "Mender gateway IP address: " $MENDER_TEST_GATEWAY
        break
    fi
    if [[ RETRIES -eq 5 ]]; then
        echo "Failed to get the IP of the 'mender-api-gateway' service"
        exit 1
    fi
    RETRIES=$((RETRIES+1))
    sleep 5
done

MENDER_SERVER_URI="https://${MENDER_TEST_GATEWAY:-localhost}"

# On MacOS docker is run in a VM,
# therefore curl calls to the container
# IP address does not reach the containers
# like they should. Therefore, default to localhost.
if [[ "$OSTYPE" == "darwin"* ]]; then
    MENDER_SERVER_URI="https://localhost"
fi

# Block until the useradm service returns an HTTP 4xx response
echo "Waiting for the useradm service to start up..."
RETRIES=0
while :
do
    curl --silent -k -X POST -u ${USER}:${PASSWORD} \
         --fail\
         --connect-timeout 120\
         --retry 60\
         --retry-delay 2\
         --retry-max-time 120\
         $MENDER_SERVER_URI/api/management/v1/useradm/auth/login
    retval=$?
    case $retval in
        0)  break ;; # User exists - continue.
        22) break ;; # Server 400 error, ie, server is up - continue.
        *) echo "It does not seem the useradm service is up and running yet. Retrying..." ;;
    esac
    if [[ $RETRIES -ge $RETRY_LIMIT ]]; then
        echo "Retried $RETRIES times without success. Giving up."
        exit 1
    fi
    RETRIES=$((RETRIES+1))
    sleep 5
done


echo "Creating a new user..."
echo "with the password: " $PASSWORD
RETRIES=0
while :
do
    docker exec \
             ${DOCKER_COMPOSE_PROJECT_NAME}_mender-useradm_1 \
             /usr/bin/useradm create-user \
             --username=${USER} \
             --password=${PASSWORD}
    retval=$?
    case $retval in
        0) echo "New user created."; break ;;
        5) # Since the password is not cached in between invocations, there is no way to upload an Artifact.
            echo "The user already exists"
            echo "Since the demo script does not cache passwords, therefore"
            echo "run 'demo down' if you want to delete the user, and create a new demo user"
            exit 0 ;;
        *) echo "docker exec error: " $retval; exit $retval ;;
    esac
    if [[ $RETRIES -ge $RETRY_LIMIT ]]; then
        echo "Retried $RETRIES times without success. Giving up."
        exit 1
    fi
    RETRIES=$((RETRIES+1))
    sleep 5
done

echo "********************"
echo $MENDER_TEST_GATEWAY
echo "********************"

echo "Getting JWT Token..."
RETRIES=0
until [[ "$JWT" != "" ]]; do
    JWT=$(curl --silent -k -X POST -u ${USER}:${PASSWORD}\
        --fail\
        --connect-timeout 120\
        --retry 60\
        --retry-delay 2\
        --retry-max-time 120\
        $MENDER_SERVER_URI/api/management/v1/useradm/auth/login)
    retval=$?
    if [[ $retval -ne 0 ]]; then
        echo "Failed to get the 'JWT' token from the useradm service."
        echo "This is needed in order to use the demo Artifact."
        echo "curl exit code: " $retval
        echo "Retrying in 5..."
    fi
    if [[ $RETRIES -ge $RETRY_LIMIT ]]; then
        echo "Retried $RETRIES times without success. Giving up."
        exit 1
    fi
    RETRIES=$((RETRIES+1))
    sleep 5
done

echo "JWT token: " $JWT

echo "Uploading the Artifact to the server..."
echo "DEMo artifact name: " $DEMO_ARTIFACT_NAME
echo "ARTIFACT_SIZE_BYTES: " $ARTIFACT_SIZE_BYTES
cout=
RETRIES=0
while :
do
    cout=$(curl --silent -k -X POST \
                --fail\
                --show-error\
                --connect-timeout 120\
                --retry-delay 2\
                --retry 60 \
                --retry-max-time 120\
                --header "Authorization: Bearer ${JWT}"\
                --form "size=${ARTIFACT_SIZE_BYTES}"\
                --form "artifact=@${DEMO_ARTIFACT_NAME}"\
                $MENDER_SERVER_URI/api/management/v1/deployments/artifacts)
    retval=$?
    if [[ $retval -ne 0 ]]; then
        echo "Failed to upload the Artifact to the demo server. curl error code: " $retval
        echo "Sleeping for 5 seconds before making another attempt..."
    else
        break
    fi
    if [[ $RETRIES -ge $RETRY_LIMIT ]]; then
        echo "Retried $RETRIES times without success. Giving up."
        exit 1
    fi
    RETRIES=$((RETRIES+1))
    sleep 5
done

errout=$(jq '.error' <<< $cout)

retval=$?

if [[ $retval -ne 0 ]]; then
    echo "Failed to parse the json response from the Mender server"
    echo "Response: "
    echo $cout
    exit $retval
fi

case "$errout" in
   " Artifact not unique"*) echo "Artifact already exists on the server" ;;
    "") echo "Artifact uploaded to the demo server" ;;
    *) echo "Uploading the demo Artifact failed with error: " $errout
       exit 1 ;;
esac

echo "****************************************"
echo
echo "Username: "      ${USER}
echo  "Login password: ${PASSWORD}"
echo
echo "****************************************"
echo "Please keep the password available, it will not be cached by the login script."
echo "Backend ready and running in the background. Press Enter to show the logs."
echo "Press Ctrl-C to stop the backend and quit."
read -se

docker-compose logs --follow
