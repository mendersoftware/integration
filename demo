#!/bin/bash

./verify-docker-versions

usage() {
    cat <<EOF
$(basename $0) [options] docker-options

--client    Enable emulated client

All other arguments passed to this command are passed directly to
docker-compose, if you want to run the demo, run:

'$(basename $0) up'
EOF
}

if [ "$#" -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    usage
    exit 1
fi

# For the integration tests the name of the docker-compose project is generated
# by pytest. For users, we use the folder name, but strip out a few characters
# that aren't allowed.
DOCKER_COMPOSE_PROJECT_NAME=${DOCKER_COMPOSE_PROJECT_NAME:-$(tr -d ".-" <<<${PWD##*/})}

CLIENT=
CLIENT_ARGS="-f docker-compose.client.yml -f docker-compose.client.demo.yml"
# The demo environment has some external dependencies upon: curl, jq
hash curl 2>/dev/null || { echo >&2 "The demo script requires the 'curl' tool to be available. Aborting."; exit 1; }
hash jq 2>/dev/null || { echo >&2 "The demo script requires the 'jq' tool to be available. Aborting."; exit 1; }

while [ -n "$1" ]; do
    if [ "$1" = "--no-client" ]; then
        echo "--no-client argument is deprecated. Client is now disabled by default and can be enabled with --client"
    elif [ "$1" = "--client" ]; then
        CLIENT="$CLIENT_ARGS"
        echo "-- enabling client container"
    elif [ "$1" = "-p" ] || [ "$1" = "--project-name" ]; then
        shift
        DOCKER_COMPOSE_PROJECT_NAME="$1"
    elif [ "$1" = "--kvm" ]; then
        echo "--kvm argument is deprecated. KVM will be enabled automatically if available"
    elif [ "$1" = "down" ] || [ "$1" = "rm" ] || [ "$1" = "stop" ]; then
        # If the argument is either "down" or "rm", enable the client so that it
        # gets cleaned up, no matter if `--client` is passed or not.
        CLIENT="$CLIENT_ARGS"
        # Not a flag, so we should break out of the loop.
        break
    else
        break
    fi
    shift
done

# Check if the demo-Artifact has been downloaded,
# or if there exists a newer one in storage.
DEMO_ARTIFACT_NAME="mender-demo-artifact.mender"
curl -sz mender-demo-artifact.mender -o mender-demo-artifact.mender https://dgsbl4vditpls.cloudfront.net/${DEMO_ARTIFACT_NAME}

retval=$?
if [ $retval -ne 0 ]; then
    echo "Failed to download the demo Artifact"
    exit $retval
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
    ARTIFACT_SIZE_BYTES=$(stat -f %z ${DEMO_ARTIFACT_NAME}) # BSD is not GNU -_-
    export GATEWAY_IP=$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p' | head -1)
else
    ARTIFACT_SIZE_BYTES=$(stat -c %s ${DEMO_ARTIFACT_NAME})
    export GATEWAY_IP=$(ip route get 1 | awk '{print $7;exit}')
fi

# speed up first start by pulling containers in parallel
docker images | grep -q 'mendersoftware/deployments'

if [[ "$?" -eq 1 ]]; then
    compose_args=""
    docker_compose_output=$(docker-compose pull -h)

    # If --no-parallel option exists, it means that docker-compose is
    # running a version where --parallel is default and will warn about
    # deprecated option if used.
    #
    # This behavior was changed in version docker-compose 1.21.0
    echo "$docker_compose_output" | grep -q -- '--no-parallel'
    if [[ "$?" -eq 1 ]]; then
        compose_args="--parallel"
    fi

    docker-compose pull ${compose_args}
fi

# Pass this value on to the GUI container as an env variable
export INTEGRATION_VERSION=$(git describe --tags --abbrev=0)
# Parse the Mender-Artifact version used from the other-components.yml file's image tag
export MENDER_ARTIFACT_VERSION=$(awk -F':' '/mendersoftware\/mender-artifact/ {print $3}' other-components.yml)
# Parse the mender version from docker-compose.yml mender image's tag
export MENDER_VERSION=$(awk -F':' '/mendersoftware\/mender-client/ {print $3}' docker-compose.client.yml)
export MENDER_DEB_PACKAGE_VERSION=$MENDER_VERSION

RUN_UP=$(echo "$@" | grep '\bup\b')
if [[ "$RUN_UP" == "" ]]; then
    # exec steals the shell, so unless docker-compose is not found,
    # exit 1 will never happen.
    exec docker-compose \
         -f docker-compose.yml \
         -f docker-compose.storage.minio.yml \
         -f docker-compose.demo.yml \
         -p ${DOCKER_COMPOSE_PROJECT_NAME} \
         $CLIENT \
         "$@"
    exit 1
fi

# ------------------------------------------------------------------------------
#
#       The following code will only be run in the case ./demo up [args]
#
# ------------------------------------------------------------------------------

MENDER_SERVER_URI="https://localhost"

# Make sure that the demo environment is brought down on SIGINT
exitfunc() {
    retval=$(docker-compose \
         -f docker-compose.yml \
         -f docker-compose.storage.minio.yml \
         -f docker-compose.demo.yml \
         -p ${DOCKER_COMPOSE_PROJECT_NAME} \
         $CLIENT \
         stop)
    exit $retval
}

trap exitfunc SIGINT
trap exitfunc SIGTERM

echo "Starting the Mender demo environment..."

docker-compose \
    -f docker-compose.yml \
    -f docker-compose.storage.minio.yml \
    -f docker-compose.demo.yml \
    -p ${DOCKER_COMPOSE_PROJECT_NAME} \
    $CLIENT \
    "$@" -d

retval=$?
if [[ $retval -ne 0 ]]; then
    echo "Failed to start docker compose"
    exit $retval
fi

USER='mender-demo@example.com'
PASSWORD=$(hexdump -n 8 -e '"%X"' < /dev/urandom | cut -c1-12)


RETRY_LIMIT=5

# Block until the useradm service returns an HTTP 4xx response
RETRIES=0
while :
do
    curl --silent -k -X POST -u ${USER}:${PASSWORD} \
         --fail\
         --connect-timeout 5\
         $MENDER_SERVER_URI/api/management/v1/useradm/auth/login
    retval=$?
    case $retval in
        0)  break ;; # User exists - continue.
        22) break ;; # Server 400 error, ie, server is up - continue.
        *) echo "It does not seem the useradm service is up and running yet. Retrying..." ;;
    esac
    if [[ $RETRIES -ge $RETRY_LIMIT ]]; then
        echo "Retried $RETRIES times without success. Giving up."
        exit 1
    fi
    RETRIES=$((RETRIES+1))
    sleep 5
done


echo "Creating a new user..."
UPLOAD_ARTIFACT="true"
RETRIES=0
while :
do
    docker exec \
             ${DOCKER_COMPOSE_PROJECT_NAME}_mender-useradm_1 \
             /usr/bin/useradm create-user \
             --username=${USER} \
             --password=${PASSWORD} \
             > /dev/null
    retval=$?
    case $retval in
        0)
            echo "****************************************"
            echo
            echo "Username: mender-demo@example.com"
            echo  "Login password: ${PASSWORD}"
            echo
            echo "****************************************"
            echo "Please keep the password available, it will not be cached by the login script."
            break ;;
        5) # If the user exists, skip uploading the Artifact
            UPLOAD_ARTIFACT=""
            echo "The user already exists. Skipping"
            echo "If you don't remember the password, you can run '$(basename $0) down' to delete"
            echo "the old user and rerun '$(basename $0) up' to create a new one."
            echo "Please note that all data will be deleted from the old demo server."
            break ;;
        *) echo "docker exec error: " $retval; exit $retval ;;
    esac
    if [[ $RETRIES -ge $RETRY_LIMIT ]]; then
        echo "Retried $RETRIES times without success. Giving up."
        exit 1
    fi
    RETRIES=$((RETRIES+1))
    sleep 5
done

if [[ $UPLOAD_ARTIFACT == "true" ]]; then

    RETRIES=0
    until [[ "$JWT" != "" ]]; do
        JWT=$(curl --silent -k -X POST -u ${USER}:${PASSWORD}\
            --fail\
            --connect-timeout 5\
            $MENDER_SERVER_URI/api/management/v1/useradm/auth/login)
        retval=$?
        if [[ $retval -ne 0 ]]; then
            echo "Failed to get the 'JWT' token from the useradm service."
            echo "This is needed in order to upload the demo Artifact."
            echo "curl exit code: " $retval
            echo "Retrying in 5..."
        fi
        if [[ $RETRIES -ge $RETRY_LIMIT ]]; then
            echo "Retried $RETRIES times without success. Giving up."
            exit 1
        fi
        RETRIES=$((RETRIES+1))
        sleep 5
    done

    cout=
    RETRIES=0
    while :
    do
        cout=$(curl --silent -k -X POST \
                    --fail\
                    --show-error\
                    --connect-timeout 5\
                    --header "Authorization: Bearer ${JWT}"\
                    --form "size=${ARTIFACT_SIZE_BYTES}"\
                    --form "artifact=@${DEMO_ARTIFACT_NAME}"\
                    $MENDER_SERVER_URI/api/management/v1/deployments/artifacts)
        retval=$?
        if [[ $retval -ne 0 ]]; then
            echo "Failed to upload the Artifact to the demo server. curl error code: " $retval
            echo "Sleeping for 5 seconds before making another attempt..."
        else
            break
        fi
        if [[ $RETRIES -ge $RETRY_LIMIT ]]; then
            echo "Retried $RETRIES times without success. Giving up."
            exit 1
        fi
        RETRIES=$((RETRIES+1))
        sleep 5
    done

    errout=$(jq '.error' <<< $cout)

    retval=$?
    if [[ $retval -ne 0 ]]; then
        echo "Failed to parse the json response from the Mender server"
        echo "Response: "
        echo $cout
        exit $retval
    fi

    case "$errout" in
    " Artifact not unique"*) ;;  # Artifact already exists on the server
        "") ;;  # Artifact uploaded to the demo server
        *) echo "Uploading the demo Artifact failed with error: " $errout
        exit 1 ;;
    esac

fi

echo "Mender demo server ready and running in the background. Copy credentials above and log in at $MENDER_SERVER_URI"

echo "Press Enter to show the logs."
echo "Press Ctrl-C to stop the backend and quit."
read -se

docker-compose -p ${DOCKER_COMPOSE_PROJECT_NAME} logs --follow
