
include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-license.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-python3-format.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-github-status-updates.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-docker-build.yml'

stages:
  - test
  - build
  - publish

variables:
  LICENSE_HEADERS_IGNORE_FILES_REGEXP: '\./extra/gitdm.*'

test:check-commits:
  except:
    refs:
      - /^(master|[0-9]+\.[0-9]+\.x)$/
    variables:
      - $RUN_TESTS_STAGING == "true"

test:check-python3-formatting:
  except:
    refs:
      - /^(master|[0-9]+\.[0-9]+\.x)$/
    variables:
      - $RUN_TESTS_STAGING == "true"

test:extra-tools:
  image: "python:3"
  stage: test

  except:
    variables:
      - $RUN_TESTS_STAGING == "true"

  before_script:
    - pip install pytest pyyaml
    # Rename the branch we're on, so that it's not in the way for the
    # subsequent fetch. It's ok if this fails, it just means we're not on any
    # branch.
    - git branch -m temp-branch || true
    # Set up git identity
    - git config --global user.name "Northern.tech" && git config --global user.email "info@northern.tech"
    # Needed for the statistics generator
    - git config --global mailmap.file $(pwd)/extra/gitdm/mailmap
    # Add github remote for tests using --integration-versions-including
    - git remote add github https://github.com/mendersoftware/integration.git
    - git fetch github
    # Fetch master branch for tests using --in-integration-version
    - git fetch origin master:master
    - git fetch origin --tags
    - git submodule update --init --recursive

    # Fetch all Open Source release repositores for testing release_tool.
    - for repo in $(env TEST_RELEASE_TOOL_LIST_OPEN_SOURCE_ONLY=1 extra/release_tool.py --list); do
    -   if [ $repo == integration ]; then
    -     continue
    -   fi
    -   git clone https://github.com/mendersoftware/$repo ../$repo
    - done

  script:
    - ( cd extra/changelog-generator && ./test-changelog-generator )
    - python3 -m pytest extra/test_release_tool.py
    - python3 -m pytest extra/test_statistics_generator.py

test:docs:
  image: tiangolo/docker-with-compose
  services:
    - docker:19.03.5-dind
  except:
    variables:
      - $RUN_TESTS_STAGING == "true"

  before_script:
    - apk add bash git openssl pwgen python3 jq
    - git config --global user.name "user"
    - git config --global user.email "user@example.com"
    - git clone https://github.com/mendersoftware/mender-docs.git mender-docs

    - MENDER_DOCS_BRANCH=$(
        for i in $(
            git for-each-ref
            --format='%(refname:short)'
            'refs/remotes/origin/[0-9].[0-9].x'
            'refs/remotes/origin/staging'
            'refs/remotes/origin/master'
            ); do
          echo $(git log --oneline $(git merge-base $i HEAD)..HEAD | wc -l) $i;
        done | sort -n | head -n1 | awk '{print $2}'
      )
    - if [[ $MENDER_DOCS_BRANCH == "origin/staging" ]]; then
    -   MENDER_DOCS_BRANCH="origin/hosted"
    - fi

    - cd mender-docs
    - git checkout $MENDER_DOCS_BRANCH

  script:
    - ./run-tests.sh

test:staging:backend-tests:
  image: debian:bullseye
  stage: test
  timeout: 4h
  only:
    variables:
      - $RUN_TESTS_STAGING == "true"

  services:
    - docker:19.03.5-dind

  variables:
    K8S: "staging"
    AWS_ACCESS_KEY_ID: $CI_JOBS_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $CI_JOBS_AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION: $CI_JOBS_AWS_REGION
    AWS_EKS_CLUSTER_NAME: $CI_JOBS_AWS_EKS_CLUSTER_NAME
    GATEWAY_HOSTNAME: "staging.hosted.mender.io"
    GMAIL_PASSWORD: $CI_GMAIL_PASSWORD
    GMAIL_ADDRESS: $CI_GMAIL_ADDRESS
    DOCKER_HOST: tcp://docker:2375
    TESTS_IN_PARALLEL: "4"

  before_script:
    - apt update
    - apt install -yyq curl gnupg
    # Install docker
    - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
    - apt-key fingerprint 0EBFCD88
    - echo "deb [arch=amd64] https://download.docker.com/linux/debian buster stable" >> /etc/apt/sources.list
    - apt update
    - apt install -yyq docker-ce=5:19.03.15~3-0~debian-buster docker-ce-cli=5:19.03.15~3-0~debian-buster containerd.io
    # Install docker-compose
    - curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/bin/docker-compose
    - chmod 775 /usr/bin/docker-compose
    # Install python dependencies
    - apt install -yyq python3-yaml
    # Export AWS keys, as group takes precedence over yaml specified ones
    # See https://docs.gitlab.com/ee/ci/variables/#priority-of-cicd-variables
    - export AWS_ACCESS_KEY_ID=$CI_JOBS_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$CI_JOBS_AWS_SECRET_ACCESS_KEY

  script:
    - cd backend-tests
    - ./run -s enterprise

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - backend-tests/acceptance.*
      - backend-tests/results_backend_integration_*.xml
      - backend-tests/report_backend_integration_*.html
    reports:
      junit: backend-tests/results_backend_integration_*.xml

test:staging:integration-tests:
  # Integration tests depends on running ssh to containers, we're forced to
  # run dockerd on the same host.
  image: docker:19.03.15-dind-alpine3.13
  stage: test
  timeout: 4h
  only:
    variables:
      - $RUN_TESTS_STAGING == "true"
  tags:
    - mender-qa-slave-highmem

  variables:
    K8S: "staging"
    AWS_ACCESS_KEY_ID: $CI_JOBS_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $CI_JOBS_AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION: $CI_JOBS_AWS_REGION
    AWS_EKS_CLUSTER_NAME: $CI_JOBS_AWS_EKS_CLUSTER_NAME
    GATEWAY_HOSTNAME: "staging.hosted.mender.io"
    GMAIL_PASSWORD: $CI_GMAIL_PASSWORD
    GMAIL_ADDRESS: $CI_GMAIL_ADDRESS
    DOCKER_CLIENT_TIMEOUT: 300
    COMPOSE_HTTP_TIMEOUT: 300
    SPECIFIC_INTEGRATION_TEST: "Enterprise"
    TESTS_IN_PARALLEL: "2"

  before_script:
    - unset DOCKER_HOST
    - unset DOCKER_TLS_VERIFY
    - unset DOCKER_CERT_PATH
    # Dependencies for post job status
    - apk --update add curl jq
    # Start dockerd in the background
    - /usr/local/bin/dockerd &
    # Wait for dockerd to start
    - |-
      MAX_WAIT=30
      while [ ! -e "/var/run/docker.sock" ] && [ $MAX_WAIT -gt 0 ]; do
        MAX_WAIT=$(($MAX_WAIT - 1))
        sleep 1
      done
    - docker version # Verify that the docker server is up and running
    # Get and install the integration test requirements
    - apk add python3-dev py3-pip
    - apk add $(cat tests/requirements/apk-requirements.txt | grep -v py-pip)
    - CRYPTOGRAPHY_DONT_BUILD_RUST=1 pip3 install -r tests/requirements/python-requirements.txt
    # Install awscli, kubectl and aws-iam-authenticator
    - pip3 install awscli
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - install -o root -g root -m 0755 kubectl /usr/bin/kubectl
    - curl -LO "https://amazon-eks.s3.us-west-2.amazonaws.com/1.17.9/2020-08-04/bin/linux/amd64/aws-iam-authenticator"
    - install -o root -g root -m 0755 kubectl /usr/bin/aws-iam-authenticator
    # Export AWS keys, as group takes precedence over yaml specified ones
    # See https://docs.gitlab.com/ee/ci/variables/#priority-of-cicd-variables
    - export AWS_ACCESS_KEY_ID=$CI_JOBS_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$CI_JOBS_AWS_SECRET_ACCESS_KEY
    # Login for private repos
    - docker login -u ${DOCKER_HUB_USERNAME} -p ${DOCKER_HUB_PASSWORD}
    - docker login -u ${REGISTRY_MENDER_IO_USERNAME} -p ${REGISTRY_MENDER_IO_PASSWORD} registry.mender.io

  script:
    - cd tests
    - ./run.sh

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - tests/mender_test_logs
      - tests/results_full_integration.xml
      - tests/report_full_integration.html
    reports:
      junit: tests/results_full_integration.xml

# Smoke test to verify requirements.txt are sane
test:integration-tests:requirements:
  stage: test
  rules:
    - changes:
      - tests/requirements/apk-requirements.txt
      - tests/requirements/python-requirements.txt
  # Use same image as in mender-qa
  image: docker:19.03-dind
  script:
    # Get and install the integration test requirements
    - apk add $(cat tests/requirements/apk-requirements.txt)
    - pip install -r tests/requirements/python-requirements.txt

build:docker:
  variables:
    DOCKER_REPOSITORY: mendersoftware/mender-client-docker-addons
    DOCKER_DIR: extra/mender-client-docker-addons

publish:image:
  variables:
    DOCKER_REPOSITORY: mendersoftware/mender-client-docker-addons
    DOCKER_DIR: extra/mender-client-docker-addons

publish:image:mender:
  variables:
    DOCKER_REPOSITORY: mendersoftware/mender-client-docker-addons
    DOCKER_DIR: extra/mender-client-docker-addons

trigger:saas:sync-staging-component:
  rules:
    - when: never

publish:image:saas:
  rules:
    - when: never
