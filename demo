#!/bin/bash

usage() {
    cat <<EOF
$(basename $0) [options] docker-options

--client
	Enable emulated client. To enable more than one client, you can use:
	  $(basename $0) --client scale mender-client=2

All other arguments passed to this command are passed directly to
docker-compose, if you want to run the demo, run:

'$(basename $0) up'
EOF
}

if [ "$#" -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    usage
    exit 1
fi

CLIENT=
CLIENT_ARGS="-f docker-compose.client.yml"
while [ -n "$1" ]; do
    if [ "$1" = "--no-client" ]; then
        echo "--no-client argument is deprecated. Client is now disabled by default and can be enabled with --client"
    elif [ "$1" = "--client" ]; then
        CLIENT="$CLIENT_ARGS"
        echo "-- enabling client container"
    elif [ "$1" = "--kvm" ]; then
        echo "--kvm argument is deprecated. KVM will be enabled automatically if available"
    elif [ "$1" = "down" ] || [ "$1" = "rm" ]; then
        # If the argument is either "down" or "rm", enable the client so that it
        # gets cleaned up, no matter if `--client` is passed or not.
        CLIENT="$CLIENT_ARGS"
        # Not a flag, so we should break out of the loop.
        break
    else
        break
    fi
    shift
done

# Check if the demo-artifact has been downloaded,
# or if there exists a newer one in storage.
DEMO_ARTIFACT_NAME="mender-demo-artifact.mender"
wget -q --timestamping https://dgsbl4vditpls.cloudfront.net/mender-demo-artifact.mender

retval=$?
if [ $retval -ne 0 ]; then
    echo "Failed to download the demo artifact"
    exit $retval
fi

ARTIFACT_SIZE_BYTES=$(stat -c %s ${DEMO_ARTIFACT_NAME})

# speed up first start by pulling containers in parallel
docker images | grep -q 'mendersoftware/deployments'

if [[ "$?" -eq 1 ]]; then
    compose_args=""
    docker_compose_output=$(docker-compose pull -h)

    # If --no-parallel option exists, it means that docker-compose is
    # running a version where --parallel is default and will warn about
    # deprecated option if used.
    #
    # This behavior was changed in version docker-compose 1.21.0
    echo "$docker_compose_output" | grep -q -- '--no-parallel'
    if [[ "$?" -eq 1 ]]; then
        compose_args = "--parallel"
    fi

    docker-compose pull ${compose_args}
fi

# Pass this value on to the GUI container as an env variable
export INTEGRATION_VERSION=$(git describe --tags --abbrev=0)

if [[ "$1" != "up" ]]; then
    exec docker-compose \
         -f docker-compose.yml \
         -f docker-compose.storage.minio.yml \
         -f docker-compose.demo.yml \
         $client \
         "$@"
fi

# ------------------------------------------------------------------------------
#
#       The following code will only be run in the case ./demo up [args]
#
# ------------------------------------------------------------------------------

echo "Starting the Mender demo environment..."

docker-compose \
    -f docker-compose.yml \
    -f docker-compose.storage.minio.yml \
    -f docker-compose.demo.yml \
    $client \
    "$@" -d

# DC_PID=$!

USER='myusername@example.com'; PASSWORD='mysecretpassword'
MENDER_SERVER_USER="${USER}:${PASSWORD}"
MENDER_SERVER_URI='https://localhost'

# Block until the useradm service returns an HTTP response.
echo "Waiting for the useradm service to start up"
curl --silent -k -X POST -u $MENDER_SERVER_USER\
     --fail\
     --retry-connrefused\
     --retry 60\
     --retry-delay 10\
     --retry-max-time 120\
     $MENDER_SERVER_URI/api/management/v1/useradm/auth/login > /dev/null

retval=$?
case $retval in
    22) ;; # Server 400 error, ie, server is up - continue.
    0)  ;; # User exists - continue.
    *)
       echo "Failed to access the mender-useradm service within the allotted two minutes."
       echo "Please check the docker-compose setup."
       echo "exit code" $retval
       exit $retval
       ;;
esac

echo "Creating a new user..."

# Create a new user.
docker exec integration_mender-useradm_1 /usr/bin/useradm create-user --username=${USER} --password=${PASSWORD}

retval=$?
case $retval in
     0) echo "New user created." ;;
     5) ;; # User already exists.
     *) exit $retval ;;
esac

echo "Getting JWT Token"

JWT=$(curl --silent -k -X POST -u $MENDER_SERVER_USER\
           --fail\
           --retry-connrefused\
           --retry 60\
           --retry-delay 10\
           --retry-max-time 120\
           $MENDER_SERVER_URI/api/management/v1/useradm/auth/login)

retval=$?
if [ $retval -ne 0 ]; then
    echo "Failed to get the 'JWT' token from the useradm service."
    echo "This is needed in order to use the demo Artifact."
    exit $retval
fi

echo "Uploading the artifact to the server..."
errout=$(curl -k --request POST\
              --silent\
              --show-error\
              --retry-connrefused\
              --retry-delay 10\
              --retry 60 \
              --retry-max-time 120\
              --header "Authorization: Bearer ${JWT}"\
              --form "size=${ARTIFACT_SIZE_BYTES}"\
              --form "artifact=@${DEMO_ARTIFACT_NAME}"\
              "${MENDER_SERVER_URI}/api/management/v1/deployments/artifacts" | jq .error)

retval=$?

case "$errout" in
   " Artifact not unique"*) echo "Artifact already exists on the server" ;; # Artifact is already on the server.
    "") echo "Artifact uploaded to the demo server" ;;
    *) echo "Uploading the demo artifact failed with error: " $errout
       exit $retval ;;
esac

trap "docker-compose \
    -f docker-compose.yml \
    -f docker-compose.storage.minio.yml \
    -f docker-compose.demo.yml \
    down" SIGINT

sleep 2

docker-compose logs --follow
